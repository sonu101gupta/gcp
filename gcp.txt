######################################################################################## LAB1 #################################################################################################################
Assign Veriables
export INSTANCE=
export PORT_NO=
export FIREWALL=
export REGION=
export ZONE=

Task 1. Create a project jumphost instance
  
gcloud compute instances create $INSTANCE \
    --zone=$ZONE \
    --machine-type=e2-micro
  
Task 2. Create a Kubernetes service cluster

gcloud container clusters create nucleus-backend \
    --num-nodes=1 \
    --zone=$ZONE
gcloud container clusters get-credentials nucleus-backend \
          --zone $ZONE
kubectl create deployment hello-server \
          --image=gcr.io/google-samples/hello-app:2.0
kubectl expose deployment hello-server \
          --type=LoadBalancer \
          --port $PORT_NO

Task 3. Set up an HTTP load balancer

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF
            
gcloud compute instance-templates create web-server-template \
       --metadata-from-file startup-script=startup.sh \
       --machine-type g1-small \
       --region $REGION
            
gcloud compute target-pools create nginx-pool --region $REGION
            
gcloud compute instance-groups managed create web-server-group \
--base-instance-name web-server \
--size 2 \
--template web-server-template \
--region $REGION
            
gcloud compute firewall-rules create $FIREWALL \
       --allow tcp:80
         
gcloud compute http-health-checks create http-basic-check
         
gcloud compute instance-groups managed \
       set-named-ports web-server-group \
       --named-ports http:80 \
       --region $REGION
         
gcloud compute backend-services create web-server-backend \
       --protocol HTTP \
       --http-health-checks http-basic-check \
       --global
         
gcloud compute backend-services add-backend web-server-backend \
       --instance-group web-server-group \
       --instance-group-region $REGION \
       --global
         
gcloud compute url-maps create web-server-map \
       --default-service web-server-backend
         
gcloud compute target-http-proxies create http-lb-proxy \
       --url-map web-server-map
         
gcloud compute forwarding-rules create $FIREWALL \
     --global \
     --target-http-proxy http-lb-proxy \
     --ports 80
         
gcloud compute forwarding-rules list


######################################################################################################### LAB 2 ###################################################################################################


Docker_Image_and_Tag_Name="valkyrie-app:v0.0.2"
REPOSITORY="valkyrie-repo"
PROJECT_ID="qwiklabs-gcp-04-a566785793bd"

1
gcloud auth list
gsutil cat gs://cloud-training/gsp318/marking/setup_marking_v2.sh | bash
gcloud source repos clone valkyrie-app
cd valkyrie-app
cat > Dockerfile <<EOF
FROM golang:1.10
WORKDIR /go/src/app
COPY source .
RUN go install -v
ENTRYPOINT ["app","-single=true","-port=8080"]
EOF
docker build -t $valkyrie-app:v0.0.2 .
cd ..
cd marking
./step1_v2.sh


2
cd ..
cd valkyrie-app
docker run -p 8080:8080 $Docker_Image_and_Tag_Name &
cd ..
cd marking
./step2_v2.sh
bash ~/marking/step2_v2.sh

3
cd ..
cd valkyrie-app

gcloud artifacts repositories create $REPOSITORY \
    --repository-format=docker \
    --location=us-central1 \
    --description="subcribe to quciklab" \
    --async 

gcloud auth configure-docker us-central1-docker.pkg.dev

docker images





docker tag c330e7a88fac us-central1-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$Docker_Image_and_Tag_Name

docker push us-central1-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$Docker_Image_and_Tag_Name




Task 4:-

sed -i s#IMAGE_HERE#us-central1-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$Docker_Image_and_Tag_Name#g k8s/deployment.yaml

gcloud container clusters get-credentials valkyrie-dev --zone us-east1-d
kubectl create -f k8s/deployment.yaml
kubectl create -f k8s/service.yaml


  ############################################################################# LAB - 3 ###################################################################################################################3

  